nav:
  home: "Startseite"
  imprint: "Impressum"
  sponsors: "Sponsoren"
  contributors: "Mitwirkende"
  support: "Support"
  contributing: "Mitwirkung"
  license: "Lizenz"
  autowiring: "Automatisches Verdrahten"
  middlewares: "Middleware"
  results: "Ergebnisse"
  usage: "Verwendung"
  logging: "Protokollierung"
  storage: "Speicherung"
  routes: "Routen"
  quick-start: "Schnellstart"
  faq: "FAQ"
  code-of-conduct: "Verhaltenskodex"

socials:
  npm:
    title0: "@idrinth/api-bench auf NPM"
    text0: "@idrinth/api-bench"
    title1: "@idrinth/api-bench-cli auf NPM"
    text1: "@idrinth/api-bench-cli"
    alt: "NPM"
  docker:
    title0: "idrinth/api-bench-gitlab-runner auf DockerHub"
    text0: "Gitlab Runner"
    title1: "idrinth/api-bench-gitea-action auf DockerHub"
    text1: "Gitea Action"
    title2: "idrinth/api-bench auf DockerHub"
    text2: "Pure Alpine"
    title3: "idrinth/api-bench-history-microservice auf DockerHub"
    text3: "Historie Microservice"
    title4: "idrinth/api-bench-history-website auf DockerHub"
    text4: "Historie Website"
    alt: "DockerHub"
  github:
    title: "idrinth/api-bench auf GitHub"
    alt: "GitHub"
  medium:
    title: "idrinth/api-bench auf Medium"
    alt: "Medium"
  youtube:
    title: "idrinth-api-bench auf youtube"
    alt: "YouTube"
  slack:
    title: "@idrinth/api-bench auf slack"
    alt: "Slack"
  linkedin:
    title: "@idrinth/api-bench auf LinkedIN"
    alt: "LinkedIn"
  open-sauced:
    title: "@idrinth/api-bench projects auf OpenSauced"
    alt: "OpenSauced"

code-of-conduct:
  meta:
    title: "Verhaltenskodex"
    description: "Der Verhaltenskodex für Beitragende des @idrinth/api-bench"

home:
  meta:
    title: "Startseite"
    description: "Willkommen in der Dokumentation für das Framework @idrinth/api-bench"
  title: "Was macht das Projekt?"
  what: "Dieses Pojekt bietet ein Framework zur Überprüfung von REST-APIs und Websites auf Änderungen der Antwortzeilen"
  why:"Dies hilft dabei, Leistungsänderungen im Code schnell und einfach zu erkennen"
  benchmark:
    title: "Warum einen benschmakr-Runner verwenden?"
    microservices: "Angesichts der zunehmenden Anzahl von APIs durch den Wechsel zu Mikroservices müssen wir herausfinden, ob Änderungen an den Antwortzeiten eines Dienstes mit Codeänderungen zusammenhängen."
    purpose: "Für diesen Zweck scheint eine definierte Last mit wiederholbaren Anfragen und einer mittleren Anzahl von Überprüfungen am nützlichsten zu sein."
  load-test:
    title: "Warum einen Lasttest-Runner verwenden?"
    microservices: "Für Planungs- und Skalierungszwecke müssen wir wissen, wie viele Benutzer wir mit einer bestimmten Anzahl von Mikroservice-Instanzen bewältigen können."
    purpose: "Für diesen Zweck scheint eine definierte wachsende Last mit wiederholbaren Anfragen und wenigen Überprüfungen am nützlichsten zu sein."
  content-test:
    title: "Warum einen Inhaltest-Runner verwenden?"
    microservices: "Mit der steigenden Anzahl von APIs ist es erforderlich, sie schnell und mit möglichst wenig Aufwand zu testen."
    purpose: "Für diesen Zweck scheinen wiederholbare Anfragen mit vielen Überprüfungen am nützlichsten zu sein."
  libraries:
    title: "Zu bestehenden Bibliotheken"
    description: "Andere Tools wie matteofigus/api-benchmark, bvanderlaan/api-bench-runner oder jeffbski/bench-rest wurden seit geraumer Zeit nicht mehr aktualisiert und bieten keine Typdefinitionen für TypeScript. Dies macht sie weniger attraktiv für Projekte, in denen eine bessere statische Codeprüfung die Entwicklungsgeschwindigkeit erheblich erhöht."
    reusability: "Ein großer Vorteil der Verwendung dieses Frameworks besteht darin, dass Routendefinitionen einmal geschrieben und für alle gewünschten Testtypen wiederverwendet werden können."
    threading: "Darüber hinaus trennt dieses Tool den Validierungsthread vom Thread, der die tatsächlichen Anfragen verarbeitet, um den Effekt komplizierter Validierungen oder großer Antwortdatenmengen auf die Datenerfassung weiter zu minimieren."

faq:
  meta:
    title: "FAQ"
    description: "Häufig gestellte Fragen zu @idrinth/api-bench"
  title: "Häufig gestellte Fragen"
  description: "Wenn Ihre Frage nicht beantwortet wurde, gehen Sie zu Slack, LinkedIn oder GitHub und hinterlassen Sie sie dort. Wir werden uns so schnell wie möglich darum kümmern."
  questions:
    title_1: "Was ist benchmarking?"
    description_1: "Benchmarking ist der Prozess, bei dem die Leistung von Software im Vergleich zu etablierten Best Practices gemessen wird."
    title_2: "Was ist ein Lassttest?"
    description_2: "Lasttests bewerten das Verhalten eines Systems unter Spitzen- oder erwarteten Lastbedingungen."
    title_3: "Wie lange dauert es einen Test zu schreiben?"
    description_3: " Die durschnittliche Zeit beträgt 2-3 Minuten.Es kann aber bis zu 15 Minuten dauern. "
    title_4: "Wie lange dauert die Einrichtung?"
    description_4: "Wenn Sie dem Schnellstart folgen, dauert es nur wenige Minuten!"
    title_5: "Ist das Projekt produktiv im Einsatz?"
    description_5: "Ja, Das Projekt ist sehr produktiv im Einsatz."
    title_6: "Gibt es zusätzliches Unterrichtsmaterial?"
    description_6: "Noch nicht, es wird aktiv daran gearbeitet."
    title_7: "Ist die Nutzung des Frameworks kostenlos?"
    description_7: "Yes, entirely. Even support via GitHub is free."
    title_8: "How fast is the public support?"
    description_8: "We strive to react within 24h and latest within 48h."

imprint:
  meta:
    title: "Imprint"
    description: "Imprint and privacy statements for this website"

sponsors:
  meta:
    title: "Sponsors | Contributing"
    description: "The following businesses and companies are sponsoring the development of api-bench by providing time, money or necessary tools."
  title: "Sponsors"
  description: "The following businesses and companies support the development of @idrinth/api-bench. This means they provide time, money or necessary tools for the development."
  bjoernbuettner:
    intro: "Björn Büttner is a Germany based business, that provides custom development and hosting services in a web context. Additionally to that some training and consulting are offered, that do include this project for performance monitoring."
    sponsoring: "The business supports the project by hosting this documentation site for free and supplying the domain."
  jungwild:
    intro: "jungwild is a Germany based recruiting agency, that uses the framework for testing their own apis."
    sponsoring: "The agency provides some time for testing and developing changes of the framework before release."

contributors:
  meta:
    title: "Contributors | Contributing"
    description: "These are the people who made the site and framework what they are today."
  title: "Contributors"
  description: "A big thank you to everyone who contributed. Below are the ones who contributed code, but other contributions are as valuable."
  code_contributors: "Code Contributors"
  none_code_contributors: "None Code Contributors"

support:
  meta:
    title: "Support"
    description: "Support options for the @idrinth/api-bench framework."
  title: "Support"
  description: "No matter who you are, you can get support via github issues and discussions. Support reaction times depend on the availability of volunteers, so it may take a day or two."
  commercial:
    title: "Commercial support"
    description: "If your closed source software needs support, that can't be handled via the above means, Björn Büttner also provides payed support on a business basis. You can reach the business via:"
  training:
    title: "Professional Training"
    description: "Training is provided by Björn Büttner on a business basis for organisations. For pricing and scheduling contact the business at:"

404:
  meta:
    title: "404 NOT FOUND"
    description: "The page you desired has not been found"
  title: "404 Not Found"
  description: "Sadly the URL you entered couldn't be found."

contributing:
  meta:
    title: "Contributing"
    description: "Contribution guidelines for the framework @idrinth/api-bench"
  title: "Contributing Guidelines"
  description: "Any and all contributions are encouraged."
  structure:
    title: "Structure"
    description: "The project is a mono-repo grouped into multiple subprojects, for example cli, mindmap, documentation-website, framework, history-microservice and history-website. You can find more detailed instructions for the specific part in the corresponding folder's readme."
  issues:
    title: "Issues"
    description: "Any idea and bug report is considered a contribution. Not only do they help improving the code base, they help other people to get more use out of this framework. Please try to stick to the format of predefined issue types to make it easier to filter and handle for anyone interested in the topic."
  code:
    title: "Code"
    style: "The style guidelines are provided via eslint. Please try to optimise code for readability, since code will be read way more often than it will be changed."
    breaking: "While adding functionality, keep in mind to break existing interfaces, entry points and functionality only if absolutely necessary."
    picking:
      title: "Picking the right issue"
      labels: "Issues that are good for relatively new coders are marked as `Good first issue`, issues marked as `help wanted` require a bit more knowledge about the project."
      project: "Within an issue you find the project information on the right hand side, opening them up will reveal further estimates about size, difficulty, priority and main affected project part"
    workflow:
      title: "Contribution workflow"
      list_item_1: "fork the repository"
      list_item_2: "create a feature branch (issue-xxx-does-something) from master"
      list_item_3: "create a draft pull request"
      list_item_4: "mention fixes #xxx in the description"
      list_item_5: "make your changes to the branch"
      list_item_6: "check if actions are all green"
      list_item_7: "mark as ready to review"
      list_item_8: "get changes reviewed"
      list_item_9: "if review is positive get changes merged otherwise fix and send back to review"
    mindmap:
      title: "Mindmap"
      nodes: "This means, that nodes  must have text property for displaying them, as well as may have a URL, a description and more nodes as children."
      introduction: "Contributing to the mindmap is  encouraged. The mindmap is build from the data.yml in /mindmap and follows the following schema:"
    tests:
      title: "Tests"
      description: "Testing new code is expected and adding tests or improving tests for old code is appreciated. The goal is to find most issues by either static analysis or unit and integration tests."
      manual:
        title: "Manual Tests"
        description: "For manual testing you can run 'npm run coai' in the source folder to automatically check out and install all required files for testing."
    naming:
      title: "Naming conventions"
      list_item_1: "camelCase for variables and functions"
      list_item_2: "UPPER_SNAKE_CASE for constants"
      list_item_3: "PascalCase for interfaces and classes"
      list_item_4: "kebab-case for file names"
    requirements:
      title: "Requirements"
      node: "One of the last two node versions"
      os: "OS: Linux / Windows / Mac"
    setup:
      title: "Setup"
      description: "Run the following commands to create the full project:"
    commits:
      title: "Commit Message Guidelines"
      preface: "*This specification is inspired by Angular commit messages guidelines."
      introduction: "These are the rules for how Git commit messages for api-bench should be formatted. This format leads to easier to read commit history."
      parts: "Each commit message consists of a header, a body, and a footer."
      header:
        title: "Commit Message Header"
        format: "Headers must adhere to the following format:"
        description: "The header is mandatory and should conform to the Commit Message Header format."
        type:
          title: "Type"
          description: "The list of supported types:"
          list_item_1: "build: Changes that affect the build system or external dependencies"
          list_item_2: "ci: Changes to CI configuration files and scripts"
          list_item_3: "docs: Documentation changes"
          list_item_4: "feature: A new feature"
          list_item_5: "fix: A bug fix"
          list_item_6: "perf: A code change that improves performance"
          list_item_7: "refactor: A code change that neither fixes a bug nor adds a feature"
          list_item_8: "test: Adding missing tests or correcting existing tests"
        scope:
          title: "Scope"
          description: "The scope should be the name of the affected part of the project. The list of supported scopes:"
          list_item_1: "framework"
          list_item_2: "website"
          list_item_3: "history-microservice"
          list_item_4: "history-website"
        summary:
          title: "Summary"
          description: "The summary field should provide a succinct description of the change."
          list_item_1: "use the imperative, present tense"
          list_item_2: "don't capitalize the first letter"
          list_item_3: "no dot (.) at the end"
      body:
        title: "Commit Message Body"
        description: "The body is mandatory for all commits except for those of type 'docs' or in cases when it' clear from the header summary. They should conform to the Commit Message Body format."
        time: "Just as in the summary, use the imperative, present tense."
        content: "The commit message body should explain why you are making the change. You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change."
      footer:
        title: "Commit Message Footer"
        description: "The footer is optional. The Commit Message Footer format describes what the footer is used for and the structure it must have."
        content: "The footer can contain information about breaking changes and deprecations and is also the place to reference GitHub issues and other PRs that this commit closes or is related to."
        breaking: "In case of breaking changes and deprecations the section should start with the phrase 'BREAKING CHANGE:' or 'DEPRECATED: ' respectively followed by a description. For example:"
      complete:
        title: "Complete Commit"
        description: "Here' a complete example of a correct commit message:"
      reverts:
        title: "Revert commits"
        description: "If the commit reverts a previous commit, it should begin with 'revert:', followed by the header of the reverted commit."
        content: "The content of the commit message body should contain:"
        list_item_1: "information about the SHA of the commit being reverted in the following format: 'This reverts commit <SHA>'"
        list_item_2: "a clear description of the reason for reverting the commit message."
    pull_requests:
      title: "Pull Requests"
      description: "Please open your pull requests in draft mode. When ready to review remove the draft. Do not force-push, it just creates additional work."
  documentation:
    title: "Documentation"
    description: "Documentation is an underrated part of every software. Adding any kind of clarification, example or improvement is highlyappreciated and encouraged. The ones writing the documentation are the unsung heroes of open and closed source software."
  examples:
    title: "Examples"
    description: "For examples please keep in mind, that we don't want to overload any api. Don't use high load tasks, don't use apis that are not for public use. It is expected that examples will be run and they must not damage anyone, including third parties."
license:
  meta:
    title: "License"
    description: "The framework @idrinth/api-bench is available under the MIT license"

autowiring:
  meta:
    title: "Autowiring | Usage"
    description: "The framework @idrinth/api-bench can autowire environment variables into route definitions"
  title: "Autowiring Route Parameters"
  limitations: "Comment types will always win over default value types. If those two don't match, you might get weird results. Sadly, a few things can't be done."
  conversion: "Types will be automatically applied if there is either a default value to get the type from or a comment like /* boolean */ parameter added in front of the parameter."
  parameters: "Parameters of contained functions will be filled with environment variable values of the respective name (aBc -> A_BC)."
  limitation:
    title: "Limitations"
    constants: "Do not use constants for their default values, they can't be properly analyzed and will throw an Error."
    objects: "Do not use arrays or objects as default values, they can't be autowired."
    destructuring: "Destructuring is not supported."
    mixed: "Default value types NOT of the same type as the parameter."
  example:
    title: "Example"
    description: "Here we autowire three environment variables as string to make the route easy to reuse."

middlewares:
  meta:
    title: "Middlewares | Usage"
    description: "The framework @idrinth/api-bench provides default middlewares and allows for custom middlewares"
  title: "Middlewares"
  description: "Middlewares use an absolute file path to be loaded. The following characters will be used to expand short forms:"
  provided:
    title: "Provided Middlewares"
    encoding: "json and form encode"
    access: "access token handling"
    csrf: "csrf-header handling"
    2xx: "status 2xx check"
    403: "status 403 check"
    404: "status 404 check"
    user-agent: "user-agent"
    cookies: "cookies"
    json: "json-validator"
    xml: "xml-validator"
    silent-server-validator: "silent-server-validator"
  custom:
    title: "Custom Middleware"
    description: "For custom middleware, implement the following interface. Prepare is called before sending a request, process after a request. If an error is thrown in process, any further validations are skipped."

results:
  meta:
    title: "Results | Usage"
    description: "The framework @idrinth/api-bench provides default result handlers and allows for additional custom result handlers"
  title: "Results"
  description: "By default, all possible result formats are provided. The files are created in the application root, but that can be overwritten programmatically."
  csv:
    description: "This provides a file, that can easily opened by excel or handled programmatically."
  html:
    description: "This provides a simple html file, that could be sent by email for example."
  cli:
    description: "This provides a small table in the command line, that shows most of the data."
  json:
    description: "This provides a file easily handled via other software. By default, it is not formatted for readability."
  custom:
    title: "Custom Results"
    description: "You can provide a custom reporter instance as part of your configuration in programmatically accessing the framework. It will be called with the complete result after all result modifiers have modified the result."

usage:
  meta:
    title: "Usage"
    description: "Basic usage information for the framework @idrinth/api-bench"
  title: "Usage"
  binaries:
    title: "Binaries"
    description: "The following binaries are available for use via scripts in your package.json."
  programmatically:
    title: "Programmatically"
    description: "Basically require main/include main and supply the executor method with required parameters. Tasks defined in src/routes-subfolders before, before_task, before_each, main, after_each, after_task, and after will be used to automatically fill the Job processed by the executor. Automatic filling only happens when there are no tasks provided to the function."

logging:
  meta:
    title: "Logging | Usage"
    description: "Information about logging usage and support of the framework @idrinth/api-bench"
  title: "Logging"
  description: "Any logger that either implements the interface or has a wrapper is an option. Wrappers for pino and winston are available."
  used:
    title: "Logging levels used"
    description: "Most log entries are debug level, with the major steps being written to info. Trace is currently not used but may be used for detailed argument printing at some point."
  custom:
    title: "Custom Logger"
    final: "For ease of use, a wrapper is provided as well, that only requires a log method to be implemented."
    description: "You can implement the logger interface below and provide any logger you want to next to the already provided ones."

storage:
  meta:
    title: "Storage | Usage"
    description: "Information about the provided mysql storage and how to create custom storage implementations for @idrinth/api-bench"
  title:  "Storage"
  description: "Storage classes store each finished set of the run. By default, nothing is stored, but a mysql storage is provided for those wanting it."
  custom:
    title: "Custom Storage"
    description: "To provide a custom storage, implement the interface below. The method will be called once per task."

routes:
  meta:
    title: "Routes | Usage"
    description: "Information about how to create test route definitions with the framework @idrinth/api-bench"
  title: "Routes"
  description: "Routes are build as configuration objects, that must be default-exported or provided via module.exports and be in a javascript file. The object is wrapped in a function to allow environment injection, see below for an example."
  example:
    title: "Example"
    description: "The code below defines a request to a URL from the environment with GET."
    middleware: "To apply middlewares add both the pre and post properties as shown in the example. Then proceed to pass in your middleware functions to be executed."

quick-start:
  meta:
    title: "Quick Start"
    description: "A few steps to quickly get an api-bench project up and running."
  title: "@idrinth/api-bench quick start"
  description: "Starting out with the framework is not difficult. Follow the next couple steps and you will have your first case ready to run in a few minutes."
  step1:
    title: "Requirements"
    description: "Make sure that nodejs in a supported version is installed. That means one of the latest two versions. The latest long term support(lts) version is always recommended."
  step2:
    title: "Setup"
    description: "Run the creation command to create a new benchmark project in a folder within your current working directory:"
  step3:
    title: "Case creation"
    description: "Go into the newly created project and create a new file at src/routes/main/first-test.ts. Fill it with the following example content:"
  step4:
    title: "First run"
    description: "With the following command you can run the example against a public test api to see it in action. Please don't try to create a service denial scenario and keep the thread count low."

loader:
  wait: "Trying to load fresh content for you, please wait."
  offline: "Please go online and then refresh the page."
  reload: "Content has changed, reloading the page for you in a moment."

command:
  or: "or"
  deprecated: "This command is deprecated."
  cli: "Available via the cli package @idrinth/api-bench-api and the framework."
  iabr:
    description: "runs the current working directory's project if the routes folder is properly setup"
    arg_1: "Argument 1: threads (default 1)"
    arg_2: "Argument 2: repetitions (default 1)"
    arg_3: "Argument 3: language code (default en)"
    arg_4: "Argument 4: taskId, that you want to run only (default all)"
  iabmp:
    description: "creates a new benchmarking project in a subdirectory of the current working directory"
    arg_1: "Argument 1: project name (default: benchmark)"
  iabgfoa:
    description: "generates test skeletons from an open-api-documentation for a project in the current working directory"
    arg_1: "Argument 1: path to the open-api-document"
  iabgfh:
    description: "generates test skeletons from an har-document for a project in the current working directory"
    arg_1: "Argument 1: path to the har-document"
  iabcrd:
    description: "checks all routes for possible issues, so there are no surprises, when actually running the code."
    arg_1: "Argument 1: language(default: en)"
  iabrl:
    description: "runs a load test with the given routes up to a limit of threads. Stops when the limit is reached or an error is found during response validation."
    arg_1: "Argument 1: threads (default 1)"
    arg_2: "Argument 2: repetitions (default 1)"
    arg_3: "Argument 3: language code (default en)"
    arg_4: "Argument 4: thread increment (default 1)"
    arg_5: "Argument 5: maximum threads (default 100)"
  iab:
    description: "This command is going to replace all other commands with a  more sensible interface in 3.0.0 and is available from 2.8.0"
    arg_1: "'iab bench --language=en --taskId=test --threads=11 --repetitions=100' runs a benchmark with all options being optional."
    arg_2: "'iab content --language=en --taskId=test' runs a content tesst/integration test with all options being optional."
    arg_3: "'iab verify --language=en' runs a route verification with all options being optional."
    arg_4: "'iab load --language=en --taskId=test --threads=11 --repetitions=100' runs a load test with all options being optional."
    arg_5: "'iab bench --language=en --taskId=test --threads=11 --repetitions=100' runs a benchmark with all options being optional."
    arg_6: "'iab stress --language=en --taskId=test --threads=11 --repetitions=100 --duration=60' runs a stress test for the desired duration in seconds with all options being optional."
